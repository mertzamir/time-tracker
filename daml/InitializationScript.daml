module InitializationScript where

import Daml.Script
import DA.Time
import DA.Date
import TimeTracker
import DA.List

initialize =
  script do
    mert <- allocateParty "Mert"
    bob <- allocateParty "Bob"

    -- Create a record for Mert
    mertCid <- submit mert do
      createCmd Task with
        owner = mert
        description = "Take Home Test for Digital Asset"
        startTime = time (date 2023 Mar 27) 11 0 0
        endTime = time (date 2023 Mar 27) 12 0 0
        projectId = "1"

    -- Create a record for Bob
    bobCid <- submit bob do
      createCmd Task with
        owner = bob
        description = "Review Mert's take home test"
        startTime = time (date 2023 Mar 27) 14 0 0
        endTime = time (date 2023 Mar 27) 14 30 0
        projectId = "2"

    -- Update Mert's initial record
    let updatedStart = time (date 2023 May 27) 10 0 0
    let updatedEnd = time (date 2023 May 27) 11 0 0
    newMertCid <- submit mert do
      exerciseCmd mertCid $ UpdateTask with 
        newDescription = Some "New description"
        newStartTime = Some updatedStart
        newEndTime = Some updatedEnd
        newProjectId = Some "new ID"

    -- Delete Bob's initial record
    submit bob do exerciseCmd bobCid $ DeleteTask

    -- Create TaskSummary Record for Mert and populate it with Tasks
    -- First create some Task records for Mert
    mertTask1 <- submit mert do
      createCmd Task with
        owner = mert
        description = "Task-1"
        startTime = time (date 2023 Mar 27) 11 0 0
        endTime = time (date 2023 Mar 27) 12 0 0
        projectId = "1"
    mertTask2 <- submit mert do
      createCmd Task with
        owner = mert
        description = "Task-2"
        startTime = time (date 2023 Mar 27) 13 0 0
        endTime = time (date 2023 Mar 27) 14 0 0
        projectId = "1"
    mertTask3 <- submit mert do
      createCmd Task with
        owner = mert
        description = "Task-1"
        startTime = time (date 2023 Mar 27) 11 0 0
        endTime = time (date 2023 Mar 27) 12 0 0
        projectId = "2"

    contracts <- query @Task mert -- fetch Mert's Task contracts
    let tasks = map snd contracts -- Extract Task instances 
    debug tasks
    -- debug (tasks !! 2)

    -- Create TaskSummary Record for Mert for projectId=1
    mertTSCid <- submit mert do
      createCmd TaskSummary with
        owner = mert
        tasks = []

    -- Add Task records to Mert's TaskSummary
    mertTsCid2 <- submit mert do
      exerciseCmd mertTSCid $ AddTask with
        taskToAdd = (tasks !! 1)
    
    mertTsCid3 <- submit mert do
      exerciseCmd mertTsCid2 $ AddTask with
        taskToAdd = (tasks !! 2)

    mertTsCid4 <- submit mert do
      exerciseCmd mertTsCid3 $ AddTask with
        taskToAdd = (tasks !! 3)

    submitMustFail mert do -- This should fail since it's trying to add the same Task twice
      exerciseCmd mertTsCid4 $ AddTask with
        taskToAdd = (tasks !! 3)

  -- Remove first Task 
    let taskToRemove = tasks !! 1
    mertTsCid4 <- submit mert do 
      exerciseCmd mertTsCid4 $ RemoveTask with
        taskToRemove = taskToRemove

    submitMustFail mert do -- This should fail since it's removing a non-existent Task 
      exerciseCmd mertTsCid3 $ RemoveTask with
        taskToRemove = taskToRemove

    return ()
 